diff --git a/app/hello/hello_traits.h b/app/hello/hello_traits.h
index 5328337..e4bfe99 100644
--- a/app/hello/hello_traits.h
+++ b/app/hello/hello_traits.h
@@ -21,7 +21,7 @@ template<> struct Traits<Build>: public Traits_Tokens
     static const bool enabled = true;
     static const bool monitored = true;
     static const bool debugged = true;
-    static const bool hysterically_debugged = false;
+    static const bool hysterically_debugged = true;
 
     // Default aspects
     typedef ALIST<> ASPECTS;
@@ -34,7 +34,7 @@ template<> struct Traits<Debug>: public Traits<Build>
     static const bool error   = true;
     static const bool warning = true;
     static const bool info    = false;
-    static const bool trace   = false;
+    static const bool trace   = true;
 };
 
 template<> struct Traits<Lists>: public Traits<Build>
@@ -122,7 +122,7 @@ template<> struct Traits<Thread>: public Traits<Build>
     static const bool simulate_capacity = false;
     static const unsigned int QUANTUM = 10000; // us
 
-    typedef RR Criterion;
+    typedef BRI Criterion;
 };
 
 template<> struct Traits<Scheduler<Thread>>: public Traits<Build>
diff --git a/app/p1/makefile b/app/p1/makefile
new file mode 100644
index 0000000..8a6578a
--- /dev/null
+++ b/app/p1/makefile
@@ -0,0 +1,17 @@
+# EPOS Application Makefile
+
+include ../../makedefs
+
+all: install
+
+$(APPLICATION):	$(APPLICATION).o $(LIB)/*
+		$(ALD) $(ALDFLAGS) -o $@ $(APPLICATION).o
+
+$(APPLICATION).o: $(APPLICATION).cc $(SRC)
+		$(ACC) $(ACCFLAGS) -o $@ $<
+
+install: $(APPLICATION)
+		$(INSTALL) $(APPLICATION) $(IMG)
+
+clean:
+		$(CLEAN) *.o $(APPLICATION)
diff --git a/app/p1/p1.cc b/app/p1/p1.cc
new file mode 100644
index 0000000..dbadb69
--- /dev/null
+++ b/app/p1/p1.cc
@@ -0,0 +1,77 @@
+// EPOS Scheduler Test Program
+
+#include <machine/display.h>
+#include <time.h>
+#include <synchronizer.h>
+#include <process.h>
+
+using namespace EPOS;
+
+Thread * thread[6];
+
+OStream cout;
+
+int cpuBoundFunc();
+int ioBoundFunc();
+
+int main()
+{
+    cout << "Scheduler test" << endl;
+
+    thread[0] = new Thread(&cpuBoundFunc);
+    thread[1] = new Thread(&ioBoundFunc);
+    thread[2] = new Thread(&cpuBoundFunc);
+    thread[3] = new Thread(&ioBoundFunc);
+    thread[4] = new Thread(&cpuBoundFunc);
+    thread[5] = new Thread(&ioBoundFunc);
+
+    cout << "Threads created..." << endl;
+
+    for(int i = 0; i < 6; i++) {
+        thread[i]->join();
+
+        if (i % 2 == 1)
+            cout << "IO Bound Thread " << thread[i] << " finished with priority: " << thread[i]->priority()<< endl;
+        else 
+            cout << "CPU Bound Thread " << thread[i] << " finished with priority: " << thread[i]->priority()<< endl;
+    }
+
+    for(int i = 0; i < 2; i++)
+        delete thread[i];
+
+    cout << "The end!" << endl;
+
+    return 0;
+}
+
+int cpuBoundFunc()
+{
+    int n1 = 0, n2 = 1, result;
+    for (size_t i = 0; i < 30000; i++)
+    {
+        if (i <= 1)
+            result = i;
+        else {
+            result = n1 + n2;
+            n1 = n2;
+            n2 = result;
+        }
+    }
+
+    cout << "Fibonacci of " << 10 << " is " << result << endl;
+    return 0;
+}
+
+int ioBoundFunc()
+{
+    for (size_t i = 0; i < 4; i++)
+    {
+        cout << "IO bound process | Getting data from disk... " << endl;
+
+        Alarm::delay(10000);
+
+        cout << "IO bound process | Done getting data. " << endl;
+    }
+
+    return 0;
+}
diff --git a/app/p1/p1_traits.h b/app/p1/p1_traits.h
new file mode 100644
index 0000000..f4e2d1d
--- /dev/null
+++ b/app/p1/p1_traits.h
@@ -0,0 +1,149 @@
+#ifndef __traits_h
+#define __traits_h
+
+#include <system/config.h>
+
+__BEGIN_SYS
+
+// Build
+template<> struct Traits<Build>: public Traits_Tokens
+{
+    // Basic configuration
+    static const unsigned int MODE = LIBRARY;
+    static const unsigned int ARCHITECTURE = RV64;
+    static const unsigned int MACHINE = RISCV;
+    static const unsigned int MODEL = SiFive_U;
+    static const unsigned int CPUS = 1;
+    static const unsigned int NODES = 1; // (> 1 => NETWORKING)
+    static const unsigned int EXPECTED_SIMULATION_TIME = 60; // s (0 => not simulated)
+
+    // Default flags
+    static const bool enabled = true;
+    static const bool monitored = true;
+    static const bool debugged = true;
+    static const bool hysterically_debugged = true;
+
+    // Default aspects
+    typedef ALIST<> ASPECTS;
+};
+
+
+// Utilities
+template<> struct Traits<Debug>: public Traits<Build>
+{
+    static const bool error   = true;
+    static const bool warning = true;
+    static const bool info    = false;
+    static const bool trace   = false;
+};
+
+template<> struct Traits<Lists>: public Traits<Build>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+template<> struct Traits<Spin>: public Traits<Build>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+template<> struct Traits<Heaps>: public Traits<Build>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+template<> struct Traits<Observers>: public Traits<Build>
+{
+    // Some observed objects are created before initializing the Display
+    // Enabling debug may cause trouble in some Machines
+    static const bool debugged = false;
+};
+
+
+// System Parts (mostly to fine control debugging)
+template<> struct Traits<Boot>: public Traits<Build>
+{
+};
+
+template<> struct Traits<Setup>: public Traits<Build>
+{
+};
+
+template<> struct Traits<Init>: public Traits<Build>
+{
+};
+
+template<> struct Traits<Framework>: public Traits<Build>
+{
+};
+
+template<> struct Traits<Aspect>: public Traits<Build>
+{
+    static const bool debugged = hysterically_debugged;
+};
+
+
+__END_SYS
+
+// Mediators
+#include __ARCHITECTURE_TRAITS_H
+#include __MACHINE_TRAITS_H
+
+__BEGIN_SYS
+
+
+// API Components
+template<> struct Traits<Application>: public Traits<Build>
+{
+    static const unsigned int STACK_SIZE = Traits<Machine>::STACK_SIZE;
+    static const unsigned int HEAP_SIZE = Traits<Machine>::HEAP_SIZE;
+    static const unsigned int MAX_THREADS = Traits<Machine>::MAX_THREADS;
+};
+
+template<> struct Traits<System>: public Traits<Build>
+{
+    static const unsigned int mode = Traits<Build>::MODE;
+    static const bool multithread = (Traits<Application>::MAX_THREADS > 1);
+    static const bool multiheap = Traits<Scratchpad>::enabled;
+
+    static const unsigned long LIFE_SPAN = 1 * YEAR; // s
+    static const unsigned int DUTY_CYCLE = 1000000; // ppm
+
+    static const bool reboot = true;
+
+    static const unsigned int STACK_SIZE = Traits<Machine>::STACK_SIZE;
+    static const unsigned int HEAP_SIZE = (Traits<Application>::MAX_THREADS + 1) * Traits<Application>::STACK_SIZE;
+};
+
+template<> struct Traits<Thread>: public Traits<Build>
+{
+    static const bool enabled = Traits<System>::multithread;
+    static const bool trace_idle = hysterically_debugged;
+    static const bool simulate_capacity = false;
+    static const unsigned int QUANTUM = 1000; // us
+
+    typedef BRI Criterion;
+};
+
+template<> struct Traits<Scheduler<Thread>>: public Traits<Build>
+{
+    static const bool debugged = Traits<Thread>::trace_idle || hysterically_debugged;
+};
+
+template<> struct Traits<Synchronizer>: public Traits<Build>
+{
+    static const bool enabled = Traits<System>::multithread;
+};
+
+template<> struct Traits<Alarm>: public Traits<Build>
+{
+    static const bool visible = hysterically_debugged;
+};
+
+template<> struct Traits<Address_Space>: public Traits<Build> {};
+
+template<> struct Traits<Segment>: public Traits<Build> {};
+
+__END_SYS
+
+#endif
diff --git a/app/philosophers_dinner/philosophers_dinner_traits.h b/app/philosophers_dinner/philosophers_dinner_traits.h
index 5328337..107ecd6 100644
--- a/app/philosophers_dinner/philosophers_dinner_traits.h
+++ b/app/philosophers_dinner/philosophers_dinner_traits.h
@@ -122,7 +122,7 @@ template<> struct Traits<Thread>: public Traits<Build>
     static const bool simulate_capacity = false;
     static const unsigned int QUANTUM = 10000; // us
 
-    typedef RR Criterion;
+    typedef BRI Criterion;
 };
 
 template<> struct Traits<Scheduler<Thread>>: public Traits<Build>
diff --git a/app/producer_consumer/producer_consumer_traits.h b/app/producer_consumer/producer_consumer_traits.h
index 5328337..107ecd6 100644
--- a/app/producer_consumer/producer_consumer_traits.h
+++ b/app/producer_consumer/producer_consumer_traits.h
@@ -122,7 +122,7 @@ template<> struct Traits<Thread>: public Traits<Build>
     static const bool simulate_capacity = false;
     static const unsigned int QUANTUM = 10000; // us
 
-    typedef RR Criterion;
+    typedef BRI Criterion;
 };
 
 template<> struct Traits<Scheduler<Thread>>: public Traits<Build>
diff --git a/include/architecture/rv64/rv64_cpu.h b/include/architecture/rv64/rv64_cpu.h
index a805611..b69b6a6 100644
--- a/include/architecture/rv64/rv64_cpu.h
+++ b/include/architecture/rv64/rv64_cpu.h
@@ -55,7 +55,15 @@ public:
         TVM             = 1 << 20,      // Trap Virtual Memory makes SATP inaccessible in supervisor mode
         TW              = 1 << 21,      // Timeout Wait for WFI outside machine mode
         TSR             = 1 << 22,      // Trap SRet in supervisor mode
-        SD              = 1 << 31,      // Status Dirty = (FS | XS)
+        SXL             = 3UL << 32,      // XLEN for S-mode
+        SXL_32          = 1UL << 32,      // XLEN for S-mode 32 bits
+        SXL_64          = 2UL << 32,      // XLEN for S-mode 64 bits
+        SXL_128         = 3UL << 32,      // XLEN for S-mode 128 bits
+        UXL             = 3UL << 34,      // XLEN for S-mode
+        UXL_32          = 1UL << 34,      // XLEN for U-mode 32 bits
+        UXL_64          = 2UL << 34,      // XLEN for U-mode 64 bits
+        UXL_128         = 3UL << 34,      // XLEN for U-mode 128 bits
+        SD              = 1UL << 63,      // Status Dirty = (FS | XS)
     };
 
     // Interrupt-Enable, Interrupt-Pending and Machine Cause Registers ([m|s]ie, [m|s]ip, and [m|s]cause when interrupt bit is set)
@@ -417,89 +425,86 @@ inline void CPU::Context::push(bool interrupt)
 
 if(interrupt) {
     ASM("       csrr     x3,    mepc            \n"
-        "       sw       x3,    0(sp)           \n");   // push MEPC as PC on interrupts
+        "       sd       x3,    0(sp)           \n");   // push MEPC as PC on interrupts
 } else {
-    ASM("       sw       x1,    0(sp)           \n");   // push RA as PC on context switches
+    ASM("       sd       x1,    0(sp)           \n");   // push RA as PC on context switches
 }
-
-    ASM("       csrr     x3,  mstatus           \n");
-
-    ASM("       sw       x3,    4(sp)           \n"     // push ST
-        "       sw       x1,    8(sp)           \n"     // push RA
-        "       sw       x5,   12(sp)           \n"     // push x5-x31
-        "       sw       x6,   16(sp)           \n"
-        "       sw       x7,   20(sp)           \n"
-        "       sw       x8,   24(sp)           \n"
-        "       sw       x9,   28(sp)           \n"
-        "       sw      x10,   32(sp)           \n"
-        "       sw      x11,   36(sp)           \n"
-        "       sw      x12,   40(sp)           \n"
-        "       sw      x13,   44(sp)           \n"
-        "       sw      x14,   48(sp)           \n"
-        "       sw      x15,   52(sp)           \n"
-        "       sw      x16,   56(sp)           \n"
-        "       sw      x17,   60(sp)           \n"
-        "       sw      x18,   64(sp)           \n"
-        "       sw      x19,   68(sp)           \n"
-        "       sw      x20,   72(sp)           \n"
-        "       sw      x21,   76(sp)           \n"
-        "       sw      x22,   80(sp)           \n"
-        "       sw      x23,   84(sp)           \n"
-        "       sw      x24,   88(sp)           \n"
-        "       sw      x25,   92(sp)           \n"
-        "       sw      x26,   96(sp)           \n"
-        "       sw      x27,  100(sp)           \n"
-        "       sw      x28,  104(sp)           \n"
-        "       sw      x29,  108(sp)           \n"
-        "       sw      x30,  112(sp)           \n"
-        "       sw      x31,  116(sp)           \n");
+    ASM("       csrr     x3,  mstatus            \n"
+        "       sd       x3,     8(sp)           \n"     // push ST
+        "       sd       x1,    16(sp)           \n"     // push RA
+        "       sd       x5,    24(sp)           \n"     // push x5-x31
+        "       sd       x6,    32(sp)           \n"
+        "       sd       x7,    40(sp)           \n"
+        "       sd       x8,    48(sp)           \n"
+        "       sd       x9,    56(sp)           \n"
+        "       sd      x10,    64(sp)           \n"
+        "       sd      x11,    72(sp)           \n"
+        "       sd      x12,    80(sp)           \n"
+        "       sd      x13,    88(sp)           \n"
+        "       sd      x14,    96(sp)           \n"
+        "       sd      x15,   104(sp)           \n"
+        "       sd      x16,   112(sp)           \n"
+        "       sd      x17,   120(sp)           \n"
+        "       sd      x18,   128(sp)           \n"
+        "       sd      x19,   136(sp)           \n"
+        "       sd      x20,   144(sp)           \n"
+        "       sd      x21,   152(sp)           \n"
+        "       sd      x22,   160(sp)           \n"
+        "       sd      x23,   168(sp)           \n"
+        "       sd      x24,   176(sp)           \n"
+        "       sd      x25,   184(sp)           \n"
+        "       sd      x26,   192(sp)           \n"
+        "       sd      x27,   200(sp)           \n"
+        "       sd      x28,   208(sp)           \n"
+        "       sd      x29,   216(sp)           \n"
+        "       sd      x30,   224(sp)           \n"
+        "       sd      x31,   232(sp)           \n");
 }
 
 inline void CPU::Context::pop(bool interrupt)
 {
-    ASM("       lw       x3,    0(sp)           \n");   // pop PC into TMP
+    ASM("       ld       x3,    0(sp)           \n");   // pop PC into TMP
 if(interrupt) {
     ASM("       add      x3, x3, a0             \n");   // a0 is set by exception handlers to adjust [M|S]EPC to point to the next instruction if needed
 }
     ASM("       csrw     mepc, x3               \n");   // MEPC = PC
 
-    ASM("       lw       x3,    4(sp)           \n");   // pop ST into TMP
+    ASM("       ld       x3,    8(sp)           \n");   // pop ST into TMP
 if(!interrupt) {
     ASM("       li       a0, 3 << 11            \n"     // use a0 as a second TMP, since it will be restored later
         "       or       x3, x3, a0             \n");   // mstatus.MPP is automatically cleared on mret, so we reset it to MPP_M here
 }
-
-    ASM("       lw       x1,    8(sp)           \n"     // pop RA
-        "       lw       x5,   12(sp)           \n"     // pop x5-x31
-        "       lw       x6,   16(sp)           \n"
-        "       lw       x7,   20(sp)           \n"
-        "       lw       x8,   24(sp)           \n"
-        "       lw       x9,   28(sp)           \n"
-        "       lw      x10,   32(sp)           \n"
-        "       lw      x11,   36(sp)           \n"
-        "       lw      x12,   40(sp)           \n"
-        "       lw      x13,   44(sp)           \n"
-        "       lw      x14,   48(sp)           \n"
-        "       lw      x15,   52(sp)           \n"
-        "       lw      x16,   56(sp)           \n"
-        "       lw      x17,   60(sp)           \n"
-        "       lw      x18,   64(sp)           \n"
-        "       lw      x19,   68(sp)           \n"
-        "       lw      x20,   72(sp)           \n"
-        "       lw      x21,   76(sp)           \n"
-        "       lw      x22,   80(sp)           \n"
-        "       lw      x23,   84(sp)           \n"
-        "       lw      x24,   88(sp)           \n"
-        "       lw      x25,   92(sp)           \n"
-        "       lw      x26,   96(sp)           \n"
-        "       lw      x27,  100(sp)           \n"
-        "       lw      x28,  104(sp)           \n"
-        "       lw      x29,  108(sp)           \n"
-        "       lw      x30,  112(sp)           \n"
-        "       lw      x31,  116(sp)           \n"
-        "       addi    sp, sp, %0              \n" : : "i"(sizeof(Context))); // complete the pops above by adjusting SP
-
-    ASM("       csrw    mstatus, x3             \n");   // MSTATUS = ST
+    ASM("       ld       x1,    16(sp)           \n"     // pop RA
+        "       ld       x5,    24(sp)           \n"     // pop x5-x31
+        "       ld       x6,    32(sp)           \n"
+        "       ld       x7,    40(sp)           \n"
+        "       ld       x8,    48(sp)           \n"
+        "       ld       x9,    56(sp)           \n"
+        "       ld      x10,    64(sp)           \n"
+        "       ld      x11,    72(sp)           \n"
+        "       ld      x12,    80(sp)           \n"
+        "       ld      x13,    88(sp)           \n"
+        "       ld      x14,    96(sp)           \n"
+        "       ld      x15,   104(sp)           \n"
+        "       ld      x16,   112(sp)           \n"
+        "       ld      x17,   120(sp)           \n"
+        "       ld      x18,   128(sp)           \n"
+        "       ld      x19,   136(sp)           \n"
+        "       ld      x20,   144(sp)           \n"
+        "       ld      x21,   152(sp)           \n"
+        "       ld      x22,   160(sp)           \n"
+        "       ld      x23,   168(sp)           \n"
+        "       ld      x24,   176(sp)           \n"
+        "       ld      x25,   184(sp)           \n"
+        "       ld      x26,   192(sp)           \n"
+        "       ld      x27,   200(sp)           \n"
+        "       ld      x28,   208(sp)           \n"
+        "       ld      x29,   216(sp)           \n"
+        "       ld      x30,   224(sp)           \n"
+        "       ld      x31,   232(sp)           \n"
+        "       addi    sp, sp, %0               \n" : : "i"(sizeof(Context))); // complete the pops above by adjusting SP
+
+    ASM("       csrw    mstatus, x3              \n");   // MSTATUS = ST
 }
 
 inline CPU::Reg64 htole64(CPU::Reg64 v) { return CPU::htole64(v); }
diff --git a/include/architecture/rv64/rv64_pmu.h b/include/architecture/rv64/rv64_pmu.h
index 33bebe9..fe49a71 100644
--- a/include/architecture/rv64/rv64_pmu.h
+++ b/include/architecture/rv64/rv64_pmu.h
@@ -4,6 +4,7 @@
 #define __rv64_pmu_h
 
 #include <architecture/cpu.h>
+#include <architecture/rv64/rv64_tsc.h>
 #define __pmu_common_only__
 #include <architecture/pmu.h>
 #undef __pmu_common_only__
@@ -300,142 +301,107 @@ private:
         assert(counter < COUNTERS);
 
         Count reg = 0;
-        Reg aux = 0;
 
         switch(counter)
         {
         case 0:
-            ASM("rdcycleh %0" : "=r"(reg) : );
-            ASM("rdcycle  %0" : "=r"(aux) : );
+            ASM("rdcycle  %0" : "=r"(reg) : );
             break;
-#ifndef __sifive_e__
-            case 1:
-            ASM("rdtimeh %0" : "=r"(reg) : );
-            ASM("rdtime  %0" : "=r"(aux) : );
+        case 1:
+            reg = TSC::time_stamp();
             break;
-#endif
         case 2:
-            ASM("rdinstreth %0" : "=r"(reg) : );
-            ASM("rdinstret  %0" : "=r"(aux) : );
+            ASM("rdinstret  %0" : "=r"(reg) : );
             break;
         case 3:
-            ASM("csrr %0, mhpmcounter3h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter3"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter3"  : "=r"(reg) : );
             break;
         case 4:
-            ASM("csrr %0, mhpmcounter4h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter4"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter4"  : "=r"(reg) : );
             break;
         case 5:
-            ASM("csrr %0, mhpmcounter5h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter5"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter5"  : "=r"(reg) : );
             break;
         case 6:
-            ASM("csrr %0, mhpmcounter6h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter6"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter6"  : "=r"(reg) : );
             break;
         case 7:
-            ASM("csrr %0, mhpmcounter7h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter7"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter7"  : "=r"(reg) : );
             break;
         case 8:
-            ASM("csrr %0, mhpmcounter8h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter8"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter8"  : "=r"(reg) : );
             break;
         case 9:
-            ASM("csrr %0, mhpmcounter9h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter9"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter9"  : "=r"(reg) : );
             break;
         case 10:
-            ASM("csrr %0, mhpmcounter10h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter10"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter10"  : "=r"(reg) : );
             break;
         case 11:
-            ASM("csrr %0, mhpmcounter11h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter11"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter11"  : "=r"(reg) : );
             break;
         case 12:
-            ASM("csrr %0, mhpmcounter12h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter12"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter12"  : "=r"(reg) : );
             break;
         case 13:
-            ASM("csrr %0, mhpmcounter13h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter13"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter13"  : "=r"(reg) : );
             break;
         case 14:
-            ASM("csrr %0, mhpmcounter14h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter14"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter14"  : "=r"(reg) : );
             break;
         case 15:
-            ASM("csrr %0, mhpmcounter15h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter15"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter15"  : "=r"(reg) : );
             break;
         case 16:
-            ASM("csrr %0, mhpmcounter16h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter16"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter16"  : "=r"(reg) : );
             break;
         case 17:
-            ASM("csrr %0, mhpmcounter17h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter17"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter17"  : "=r"(reg) : );
             break;
         case 18:
-            ASM("csrr %0, mhpmcounter18h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter18"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter18"  : "=r"(reg) : );
             break;
         case 19:
-            ASM("csrr %0, mhpmcounter19h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter19"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter19"  : "=r"(reg) : );
             break;
         case 20:
-            ASM("csrr %0, mhpmcounter20h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter20"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter20"  : "=r"(reg) : );
             break;
         case 21:
-            ASM("csrr %0, mhpmcounter21h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter21"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter21"  : "=r"(reg) : );
             break;
         case 22:
-            ASM("csrr %0, mhpmcounter22h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter22"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter22"  : "=r"(reg) : );
             break;
         case 23:
-            ASM("csrr %0, mhpmcounter23h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter23"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter23"  : "=r"(reg) : );
             break;
         case 24:
-            ASM("csrr %0, mhpmcounter24h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter24"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter24"  : "=r"(reg) : );
             break;
         case 25:
-            ASM("csrr %0, mhpmcounter25h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter25"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter25"  : "=r"(reg) : );
             break;
         case 26:
-            ASM("csrr %0, mhpmcounter26h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter26"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter26"  : "=r"(reg) : );
             break;
         case 27:
-            ASM("csrr %0, mhpmcounter27h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter27"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter27"  : "=r"(reg) : );
             break;
         case 28:
-            ASM("csrr %0, mhpmcounter28h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter28"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter28"  : "=r"(reg) : );
             break;
         case 29:
-            ASM("csrr %0, mhpmcounter29h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter29"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter29"  : "=r"(reg) : );
             break;
         case 30:
-            ASM("csrr %0, mhpmcounter30h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter30"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter30"  : "=r"(reg) : );
             break;
         case 31:
-            ASM("csrr %0, mhpmcounter31h" : "=r"(reg) : );
-            ASM("csrr %0, mhpmcounter31"  : "=r"(aux) : );
+            ASM("csrr %0, mhpmcounter31"  : "=r"(reg) : );
             break;
         }
-        return (reg << 32) | aux;
+        return reg;
     }
 
     static void mhpmcounter(Reg counter, Count reg) {
@@ -444,119 +410,90 @@ private:
         switch(counter)
         {
         case 3:
-            ASM("csrw mhpmcounter3h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter3,  %0" : : "r"(reg));
             break;
         case 4:
-            ASM("csrw mhpmcounter4h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter4,  %0" : : "r"(reg));
             break;
         case 5:
-            ASM("csrw mhpmcounter5h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter5,  %0" : : "r"(reg));
             break;
         case 6:
-            ASM("csrw mhpmcounter6h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter6,  %0" : : "r"(reg));
             break;
         case 7:
-            ASM("csrw mhpmcounter7h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter7,  %0" : : "r"(reg));
             break;
         case 8:
-            ASM("csrw mhpmcounter8h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter8,  %0" : : "r"(reg));
             break;
         case 9:
-            ASM("csrw mhpmcounter9h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter9,  %0" : : "r"(reg));
             break;
         case 10:
-            ASM("csrw mhpmcounter10h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter10,  %0" : : "r"(reg));
             break;
         case 11:
-            ASM("csrw mhpmcounter11h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter11,  %0" : : "r"(reg));
             break;
         case 12:
-            ASM("csrw mhpmcounter12h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter12,  %0" : : "r"(reg));
             break;
         case 13:
-            ASM("csrw mhpmcounter13h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter13,  %0" : : "r"(reg));
             break;
         case 14:
-            ASM("csrw mhpmcounter14h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter14,  %0" : : "r"(reg));
             break;
         case 15:
-            ASM("csrw mhpmcounter15h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter15,  %0" : : "r"(reg));
             break;
         case 16:
-            ASM("csrw mhpmcounter16h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter16,  %0" : : "r"(reg));
             break;
         case 17:
-            ASM("csrw mhpmcounter17h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter17,  %0" : : "r"(reg));
             break;
         case 18:
-            ASM("csrw mhpmcounter18h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter18,  %0" : : "r"(reg));
             break;
         case 19:
-            ASM("csrw mhpmcounter19h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter19,  %0" : : "r"(reg));
             break;
         case 20:
-            ASM("csrw mhpmcounter20h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter20,  %0" : : "r"(reg));
             break;
         case 21:
-            ASM("csrw mhpmcounter21h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter21,  %0" : : "r"(reg));
             break;
         case 22:
-            ASM("csrw mhpmcounter22h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter22,  %0" : : "r"(reg));
             break;
         case 23:
-            ASM("csrw mhpmcounter23h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter23,  %0" : : "r"(reg));
             break;
         case 24:
-            ASM("csrw mhpmcounter24h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter24,  %0" : : "r"(reg));
             break;
         case 25:
-            ASM("csrw mhpmcounter25h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter25,  %0" : : "r"(reg));
             break;
         case 26:
-            ASM("csrw mhpmcounter26h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter26,  %0" : : "r"(reg));
             break;
         case 27:
-            ASM("csrw mhpmcounter27h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter27,  %0" : : "r"(reg));
             break;
         case 28:
-            ASM("csrw mhpmcounter28h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter28,  %0" : : "r"(reg));
             break;
         case 29:
-            ASM("csrw mhpmcounter29h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter29,  %0" : : "r"(reg));
             break;
         case 30:
-            ASM("csrw mhpmcounter30h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter30,  %0" : : "r"(reg));
             break;
         case 31:
-            ASM("csrw mhpmcounter31h, %0" : : "r"(reg >> 32));
             ASM("csrw mhpmcounter31,  %0" : : "r"(reg));
             break;
         default:
diff --git a/include/architecture/rv64/rv64_traits.h b/include/architecture/rv64/rv64_traits.h
index 5fccbba..251375f 100644
--- a/include/architecture/rv64/rv64_traits.h
+++ b/include/architecture/rv64/rv64_traits.h
@@ -11,7 +11,7 @@ template<> struct Traits<CPU>: public Traits<Build>
 {
     enum {LITTLE, BIG};
     static const unsigned int ENDIANESS         = LITTLE;
-    static const unsigned int WORD_SIZE         = 32;
+    static const unsigned int WORD_SIZE         = 64;
     static const unsigned int CLOCK             = 50000000;
     static const bool unaligned_memory_access   = false;
 };
diff --git a/include/architecture/rv64/rv64_tsc.h b/include/architecture/rv64/rv64_tsc.h
index 5ff20d0..07f3c92 100644
--- a/include/architecture/rv64/rv64_tsc.h
+++ b/include/architecture/rv64/rv64_tsc.h
@@ -20,8 +20,7 @@ private:
 
     // Registers offsets from CLINT_BASE
     enum {               // Description
-        MTIME  = 0xbff8, // Counter (lower 32 bits)
-        MTIMEH = 0xbffc  // Counter (upper 32 bits)
+        MTIME  = 0xbff8
     };
 
 public:
@@ -35,12 +34,12 @@ public:
     static Hertz frequency() { return CLOCK; }
     static PPB accuracy() { return ACCURACY; }
 
-    static Time_Stamp time_stamp() { return (CPU::Reg64(reg(MTIMEH)) << 32) | reg(MTIME); }
+    static Time_Stamp time_stamp() { return reg(MTIME); }
 
 private:
     static void init() {}
 
-    static volatile CPU::Reg32 & reg(unsigned int o) { return reinterpret_cast<volatile CPU::Reg32 *>(Memory_Map::CLINT_BASE)[o / sizeof(CPU::Reg32)]; }
+    static volatile CPU::Reg64 & reg(unsigned int o) { return reinterpret_cast<volatile CPU::Reg64 *>(Memory_Map::CLINT_BASE)[o / sizeof(CPU::Reg64)]; }
 };
 
 __END_SYS
diff --git a/include/machine/riscv/riscv_ic.h b/include/machine/riscv/riscv_ic.h
index 88d819c..12eb29e 100644
--- a/include/machine/riscv/riscv_ic.h
+++ b/include/machine/riscv/riscv_ic.h
@@ -160,11 +160,11 @@ private:
     static void exception(Interrupt_Id i);
 
     // Physical handler
-    static void entry() __attribute((naked, aligned(4)));
+    static void entry() __attribute((naked, aligned(8)));
 
     static void init();
 
-    static volatile CPU::Reg32 & reg(unsigned int o) { return reinterpret_cast<volatile CPU::Reg32 *>(Memory_Map::CLINT_BASE)[o / sizeof(CPU::Reg32)]; }
+    static volatile CPU::Reg64 & reg(unsigned int o) { return reinterpret_cast<volatile CPU::Reg64 *>(Memory_Map::CLINT_BASE)[o / sizeof(CPU::Reg64)]; }
 
 private:
     static Interrupt_Handler _int_vector[INTS];
diff --git a/include/machine/riscv/riscv_timer.h b/include/machine/riscv/riscv_timer.h
index e0d4e3c..ea8438d 100644
--- a/include/machine/riscv/riscv_timer.h
+++ b/include/machine/riscv/riscv_timer.h
@@ -77,7 +77,7 @@ public:
     void handler(const Handler & handler) { _handler = handler; }
 
 private:
-    static volatile CPU::Reg32 & reg(unsigned int o) { return reinterpret_cast<volatile CPU::Reg32 *>(Memory_Map::CLINT_BASE)[o / sizeof(CPU::Reg32)]; }
+    static volatile CPU::Reg64 & reg(unsigned int o) { return reinterpret_cast<volatile CPU::Reg64 *>(Memory_Map::CLINT_BASE)[o / sizeof(CPU::Reg64)]; }
 
     static void config(const Hertz & frequency) {
         reg(MTIMECMP) = reg(MTIME) + (CLOCK / frequency);
diff --git a/include/machine/riscv/sifive_e/sifive_e_memory_map.h b/include/machine/riscv/sifive_e/sifive_e_memory_map.h
index dc7ac89..9818c65 100644
--- a/include/machine/riscv/sifive_e/sifive_e_memory_map.h
+++ b/include/machine/riscv/sifive_e/sifive_e_memory_map.h
@@ -33,7 +33,7 @@ public:
         UART0_BASE      = 0x10013000,   // SiFive UART
         SPI0_BASE       = 0x10014000,   // SiFive-E SPI
         PWM0_BASE       = 0x10015000,   // SiFive-E GPIO
-        UART1_BASE      = 0x10023000,   // SiFive UART
+        UART1_BASE      = 0x10010000,   // SiFive UART
         SPI1_BASE       = 0x10034000,   // SiFive-E SPI
         PWM1_BASE       = 0x10025000,   // SiFive-E GPIO
         SPI2_BASE       = 0x10034000,   // SiFive-E SPI
diff --git a/include/process.h b/include/process.h
index e7beb71..a4cc5a4 100644
--- a/include/process.h
+++ b/include/process.h
@@ -109,7 +109,7 @@ protected:
     static void reschedule();
     static void time_slicer(IC::Interrupt_Id interrupt);
 
-    static void dispatch(Thread * prev, Thread * next, bool charge = true);
+    static void dispatch(Thread * prev, Thread * next, bool charge = true, bool award = false);
 
     static int idle();
 
diff --git a/include/scheduler.h b/include/scheduler.h
index 99bfd36..2f9a8d0 100644
--- a/include/scheduler.h
+++ b/include/scheduler.h
@@ -114,6 +114,7 @@ public:
     Priority(int p = NORMAL, Tn & ... an): _priority(p) {}
 
     operator const volatile int() const volatile { return _priority; }
+    int operator-=(Priority p) { return int(p) - 1; }
 
 protected:
     volatile int _priority;
@@ -145,6 +146,20 @@ public:
     FCFS(int p = NORMAL, Tn & ... an);
 };
 
+class BRI: public Priority
+{
+public:
+    static const bool timed = true;
+    static const bool dynamic = true;
+    static const bool preemptive = false;
+
+public:
+    template <typename ... Tn>
+    BRI(int p = NORMAL, Tn & ... an): Priority(p) {};
+
+    void update();
+};
+
 __END_SYS
 
 #endif
diff --git a/include/system/traits.h b/include/system/traits.h
index a430f7a..59c65de 100644
--- a/include/system/traits.h
+++ b/include/system/traits.h
@@ -105,6 +105,7 @@ class RR;
 class RM;
 class DM;
 class EDF;
+class BRI;
 class GRR;
 class Fixed_CPU;
 class CPU_Affinity;
diff --git a/ine5424.zip b/ine5424.zip
new file mode 100644
index 0000000..e44b305
Binary files /dev/null and b/ine5424.zip differ
diff --git a/makedefs b/makedefs
index 8e31376..0eb3081 100644
--- a/makedefs
+++ b/makedefs
@@ -101,8 +101,8 @@ ia32_COMP_PREFIX	:= /usr/bin/x86_64-linux-gnu-
 armv7_COMP_PREFIX	:= /usr/bin/arm-none-eabi-
 armv8_COMP_PREFIX	:= /usr/bin/aarch64-linux-gnu-
 rv32_COMP_PREFIX	:= /usr/local/rv32/bin/riscv32-unknown-linux-gnu-
-#rv64_COMP_PREFIX	:= /usr/local/rv64/bin/riscv64-unknown-linux-gnu-
-rv64_COMP_PREFIX    := /usr/local/rv32/bin/riscv32-unknown-linux-gnu-
+rv64_COMP_PREFIX	:= /usr/local/rv64/bin/riscv64-unknown-linux-gnu-
+# rv64_COMP_PREFIX    := /usr/local/rv32/bin/riscv32-unknown-linux-gnu-
 COMP_PREFIX		= $($(ARCH)_COMP_PREFIX)
 
 # Architecture specifics
@@ -198,7 +198,7 @@ riscv_CC_FLAGS		:= -march=rv32gc -mabi=ilp32f -Wl, -mno-relax
 riscv_AS_FLAGS		:= -march=rv32gc -mabi=ilp32f
 riscv_LD_FLAGS		:= -m elf32lriscv_ilp32f --no-relax
 riscv_EMULATOR		= qemu-system-riscv32 $(QEMU_DEBUG) -machine sifive_e -m $(MEM_SIZE)k -serial mon:stdio -bios none -nographic -no-reboot $(BOOT_ROM) -kernel 
-riscv_DEBUGGER		:= $(COMP_PREFIX)gdb
+riscv_DEBUGGER		:= gdb-multiarch -ex "set architecture riscv:rv32"
 riscv_FLASHER		:= 
 riscv_MAGIC		:= --nmagic
 riscv_CODE_NAME		:= .init
@@ -208,21 +208,22 @@ endif
 
 ifeq ($(MMOD),sifive_u)
 ifeq ($(ARCH),rv64)
-#riscv_CC_FLAGS		:= -march=rv64gc -mabi=lp64d -Wl, -mno-relax -mcmodel=medany
-#riscv_AS_FLAGS		:= -march=rv64gc -mabi=lp64d
-#riscv_LD_FLAGS		:= -m elf64lriscv_lp64f --no-relax
-#riscv_EMULATOR		= qemu-system-riscv64 $(QEMU_DEBUG) -machine sifive_u -smp 2 -m $(MEM_SIZE)k -serial mon:stdio -bios none -nographic -no-reboot $(BOOT_ROM) -kernel 
-riscv_CC_FLAGS      := -march=rv32gc -mabi=ilp32f -Wl, -mno-relax
-riscv_AS_FLAGS      := -march=rv32gc -mabi=ilp32f
-riscv_LD_FLAGS      := -m elf32lriscv_ilp32f --no-relax
-riscv_EMULATOR      = qemu-system-riscv32 $(QEMU_DEBUG) -machine sifive_u -cpu rv32 -smp 2 -m $(MEM_SIZE)k -serial mon:stdio -bios none -nographic -no-reboot $(BOOT_ROM) -kernel 
+riscv_CC_FLAGS		:= -march=rv64gc -mabi=lp64d -Wl, -mno-relax -mcmodel=medany
+riscv_AS_FLAGS		:= -march=rv64gc -mabi=lp64d
+riscv_LD_FLAGS		:= -m elf64lriscv_lp64f --no-relax
+riscv_EMULATOR		= qemu-system-riscv64 $(QEMU_DEBUG) -machine sifive_u -smp 2 -m $(MEM_SIZE)k -serial mon:stdio -bios none -nographic -no-reboot $(BOOT_ROM) -kernel 
+# riscv_EMULATOR		= qemu-system-riscv64 $(QEMU_DEBUG) -machine sifive_u -smp $(CPUS) -m $(MEM_SIZE)k -serial mon:stdio -bios none -nographic -no-reboot $(BOOT_ROM) -kernel 
+# riscv_CC_FLAGS      := -march=rv32gc -mabi=ilp32f -Wl, -mno-relax
+# riscv_AS_FLAGS      := -march=rv32gc -mabi=ilp32f
+# riscv_LD_FLAGS      := -m elf32lriscv_ilp32f --no-relax
+# riscv_EMULATOR      = qemu-system-riscv32 $(QEMU_DEBUG) -machine sifive_u -cpu rv32 -smp 2 -m $(MEM_SIZE)k -serial mon:stdio -bios none -nographic -no-reboot $(BOOT_ROM) -kernel 
 else
 riscv_CC_FLAGS      := -march=rv32gc -mabi=ilp32d -Wl, -mno-relax
 riscv_AS_FLAGS      := -march=rv32gc -mabi=ilp32d
 riscv_LD_FLAGS      := -m elf32lriscv_ilp32f --no-relax
-riscv_EMULATOR		= qemu-system-riscv32 $(QEMU_DEBUG) -machine virt -cpu rv32 -smp $(CPUS) -m $(MEM_SIZE)k -serial mon:stdio -bios none -nographic -no-reboot $(BOOT_ROM) -kernel 
+riscv_EMULATOR     = qemu-system-riscv32 $(QEMU_DEBUG) -machine sifive_u -cpu rv32 -smp 2 -m $(MEM_SIZE)k -serial mon:stdio -bios none -nographic -no-reboot -kernel  
 endif 
-riscv_DEBUGGER		:= $(COMP_PREFIX)gdb
+riscv_DEBUGGER		:= gdb-multiarch -ex "set architecture riscv:rv64"
 riscv_FLASHER		:= 
 riscv_MAGIC		:= --nmagic
 riscv_CODE_NAME		:= .init
diff --git a/src/api/scheduler.cc b/src/api/scheduler.cc
index 572d7fd..164d0c3 100644
--- a/src/api/scheduler.cc
+++ b/src/api/scheduler.cc
@@ -9,6 +9,11 @@ __BEGIN_SYS
 template <typename ... Tn>
 FCFS::FCFS(int p, Tn & ... an): Priority((p == IDLE) ? IDLE : Alarm::elapsed()) {}
 
+void BRI::update() {
+    if((_priority > HIGH) && (_priority <= NORMAL))
+        _priority--;
+}
+
 // Since the definition above is only known to this unit, forcing its instantiation here so it gets emitted in scheduler.o for subsequent linking with other units is necessary.
 template FCFS::FCFS<>(int p);
 
diff --git a/src/api/thread.cc b/src/api/thread.cc
index 98a0630..4d8169e 100644
--- a/src/api/thread.cc
+++ b/src/api/thread.cc
@@ -258,7 +258,7 @@ void Thread::sleep(Queue * q)
 
     Thread * next = _scheduler.chosen();
 
-    dispatch(prev, next);
+    dispatch(prev, next, true, true);
 }
 
 
@@ -322,7 +322,7 @@ void Thread::time_slicer(IC::Interrupt_Id i)
 }
 
 
-void Thread::dispatch(Thread * prev, Thread * next, bool charge)
+void Thread::dispatch(Thread * prev, Thread * next, bool charge, bool award)
 {
     // "next" is not in the scheduler's queue anymore. It's already "chosen"
 
@@ -331,6 +331,10 @@ void Thread::dispatch(Thread * prev, Thread * next, bool charge)
             _timer->restart();
     }
 
+    if (award) {
+        prev->criterion().update();
+    }
+
     if(prev != next) {
         if(prev->_state == RUNNING)
             prev->_state = READY;
diff --git a/src/architecture/rv64/rv64_cpu.cc b/src/architecture/rv64/rv64_cpu.cc
index 9ade785..67e2487 100644
--- a/src/architecture/rv64/rv64_cpu.cc
+++ b/src/architecture/rv64/rv64_cpu.cc
@@ -10,38 +10,38 @@ unsigned int CPU::_bus_clock;
 
 void CPU::Context::save() volatile
 {
-    ASM("       sw       x1,    0(a0)           \n"     // push RA as PC
-        "       csrr     x3,  mstatus           \n"
-        "       sw       x3,    4(a0)           \n"     // push ST
-        "       sw       x1,    8(a0)           \n"     // push RA
-        "       sw       x5,   12(a0)           \n"     // push x5-x31
-        "       sw       x6,   16(a0)           \n"
-        "       sw       x7,   20(a0)           \n"
-        "       sw       x8,   24(a0)           \n"
-        "       sw       x9,   28(a0)           \n"
-        "       sw      x10,   32(a0)           \n"
-        "       sw      x11,   36(a0)           \n"
-        "       sw      x12,   40(a0)           \n"
-        "       sw      x13,   44(a0)           \n"
-        "       sw      x14,   48(a0)           \n"
-        "       sw      x15,   52(a0)           \n"
-        "       sw      x16,   56(a0)           \n"
-        "       sw      x17,   60(a0)           \n"
-        "       sw      x18,   64(a0)           \n"
-        "       sw      x19,   68(a0)           \n"
-        "       sw      x20,   72(a0)           \n"
-        "       sw      x21,   76(a0)           \n"
-        "       sw      x22,   80(a0)           \n"
-        "       sw      x23,   84(a0)           \n"
-        "       sw      x24,   88(a0)           \n"
-        "       sw      x25,   92(a0)           \n"
-        "       sw      x26,   96(a0)           \n"
-        "       sw      x27,  100(a0)           \n"
-        "       sw      x28,  104(a0)           \n"
-        "       sw      x29,  108(a0)           \n"
-        "       sw      x30,  112(a0)           \n"
-        "       sw      x31,  116(a0)           \n"
-        "       ret                             \n");
+    ASM("       sd       x1,     0(a0)           \n");     // push RA as PC
+    ASM("       csrr     x3,   mstatus           \n");
+    ASM("       sd       x3,     8(sp)           \n");     // push ST
+    ASM("       sd       x1,    16(sp)           \n");     // push RA
+    ASM("       sd       x5,    24(sp)           \n");     // push x5-x31
+    ASM("       sd       x6,    32(sp)           \n");
+    ASM("       sd       x7,    40(sp)           \n");
+    ASM("       sd       x8,    48(sp)           \n");
+    ASM("       sd       x9,    56(sp)           \n");
+    ASM("       sd      x10,    64(sp)           \n");
+    ASM("       sd      x11,    72(sp)           \n");
+    ASM("       sd      x12,    80(sp)           \n");
+    ASM("       sd      x13,    88(sp)           \n");
+    ASM("       sd      x14,    96(sp)           \n");
+    ASM("       sd      x15,   104(sp)           \n");
+    ASM("       sd      x16,   112(sp)           \n");
+    ASM("       sd      x17,   120(sp)           \n");
+    ASM("       sd      x18,   128(sp)           \n");
+    ASM("       sd      x19,   136(sp)           \n");
+    ASM("       sd      x20,   144(sp)           \n");
+    ASM("       sd      x21,   152(sp)           \n");
+    ASM("       sd      x22,   160(sp)           \n");
+    ASM("       sd      x23,   168(sp)           \n");
+    ASM("       sd      x24,   176(sp)           \n");
+    ASM("       sd      x25,   184(sp)           \n");
+    ASM("       sd      x26,   192(sp)           \n");
+    ASM("       sd      x27,   200(sp)           \n");
+    ASM("       sd      x28,   208(sp)           \n");
+    ASM("       sd      x29,   216(sp)           \n");
+    ASM("       sd      x30,   224(sp)           \n");
+    ASM("       sd      x31,   232(sp)           \n");
+    ASM("       ret                              \n");
 }
 
 // Context load does not verify if interrupts were previously enabled by the Context's constructor
@@ -57,7 +57,7 @@ void CPU::switch_context(Context ** o, Context * n)     // "o" is in a0 and "n"
 {   
     // Push the context into the stack and update "o"
     Context::push();
-    ASM("sw sp, 0(a0)");   // update Context * volatile * o, which is in a0
+    ASM("sd sp, 0(a0)");   // update Context * volatile * o, which is in a0
 
     // Set the stack pointer to "n" and pop the context from the stack
     ASM("mv sp, a1");   // "n" is in a1
diff --git a/src/architecture/rv64/rv64_crt0.S b/src/architecture/rv64/rv64_crt0.S
index 576db99..a8d71ab 100644
--- a/src/architecture/rv64/rv64_crt0.S
+++ b/src/architecture/rv64/rv64_crt0.S
@@ -3,7 +3,7 @@
         .file "rv64_crt0.S"
 
         .section .text
-        .align  4
+        .align  8
         .global _start
         .type   _start, function
 _start:
@@ -11,14 +11,14 @@ _start:
         // BSS was cleared by SETUP
         call      _init
 
-        .align  4
+        .align  8
         .globl  __epos_app_entry
         .type   __epos_app_entry, function
 __epos_app_entry:
         // Main's stack was allocated by Thread::init()
         call    main
-        addi    sp, sp, -4
-        sw      a0, 0(sp)   // save main's return value to be used by exit()
+        addi    sp, sp, -8
+        sd      a0, 0(sp)   // save main's return value to be used by exit()
         call    _fini
-        lw      a0, 0(sp)
+        ld      a0, 0(sp)
         call    _exit
diff --git a/tests/active_test/active_test_traits.h b/tests/active_test/active_test_traits.h
index 5328337..107ecd6 100644
--- a/tests/active_test/active_test_traits.h
+++ b/tests/active_test/active_test_traits.h
@@ -122,7 +122,7 @@ template<> struct Traits<Thread>: public Traits<Build>
     static const bool simulate_capacity = false;
     static const unsigned int QUANTUM = 10000; // us
 
-    typedef RR Criterion;
+    typedef BRI Criterion;
 };
 
 template<> struct Traits<Scheduler<Thread>>: public Traits<Build>
diff --git a/tests/alarm_test/alarm_test_traits.h b/tests/alarm_test/alarm_test_traits.h
index f4c8d41..211b3a2 100644
--- a/tests/alarm_test/alarm_test_traits.h
+++ b/tests/alarm_test/alarm_test_traits.h
@@ -122,7 +122,7 @@ template<> struct Traits<Thread>: public Traits<Build>
     static const bool simulate_capacity = false;
     static const unsigned int QUANTUM = 100000; // us
 
-    typedef RR Criterion;
+    typedef BRI Criterion;
 };
 
 template<> struct Traits<Scheduler<Thread>>: public Traits<Build>
diff --git a/tests/pmu_test/pmu_test_traits.h b/tests/pmu_test/pmu_test_traits.h
index 9bf0050..830a650 100644
--- a/tests/pmu_test/pmu_test_traits.h
+++ b/tests/pmu_test/pmu_test_traits.h
@@ -10,9 +10,9 @@ template<> struct Traits<Build>: public Traits_Tokens
 {
     // Basic configuration
     static const unsigned int MODE = LIBRARY;
-    static const unsigned int ARCHITECTURE = RV32;
+    static const unsigned int ARCHITECTURE = RV64;
     static const unsigned int MACHINE = RISCV;
-    static const unsigned int MODEL = SiFive_E; 
+    static const unsigned int MODEL = SiFive_U; 
     static const unsigned int CPUS = 1;
     static const unsigned int NODES = 1; // (> 1 => NETWORKING)
     static const unsigned int EXPECTED_SIMULATION_TIME = 60; // s (0 => not simulated)
@@ -122,7 +122,7 @@ template<> struct Traits<Thread>: public Traits<Build>
     static const bool simulate_capacity = false;
     static const unsigned int QUANTUM = 1000; // us
 
-    typedef RR Criterion;
+    typedef BRI Criterion;
 };
 
 template<> struct Traits<Scheduler<Thread>>: public Traits<Build>
diff --git a/tests/segment_test/segment_test_traits.h b/tests/segment_test/segment_test_traits.h
index ca4d575..6a803be 100644
--- a/tests/segment_test/segment_test_traits.h
+++ b/tests/segment_test/segment_test_traits.h
@@ -122,7 +122,7 @@ template<> struct Traits<Thread>: public Traits<Build>
     static const bool simulate_capacity = false;
     static const unsigned int QUANTUM = 100000; // us
 
-    typedef RR Criterion;
+    typedef BRI Criterion;
 };
 
 template<> struct Traits<Scheduler<Thread>>: public Traits<Build>
diff --git a/tests/uart_test/uart_test_traits.h b/tests/uart_test/uart_test_traits.h
index 9bf0050..5318e89 100644
--- a/tests/uart_test/uart_test_traits.h
+++ b/tests/uart_test/uart_test_traits.h
@@ -122,7 +122,7 @@ template<> struct Traits<Thread>: public Traits<Build>
     static const bool simulate_capacity = false;
     static const unsigned int QUANTUM = 1000; // us
 
-    typedef RR Criterion;
+    typedef BRI Criterion;
 };
 
 template<> struct Traits<Scheduler<Thread>>: public Traits<Build>
